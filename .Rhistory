snippet <- substring(hp[i],
linklocations[[1]][j],
if (j == length(linklocations[[1]])) nchar(hp[i]) else linklocations[[1]][j+1])
# Link
link[j,i] <- substring(snippet, gregexpr("href=\"",snippet)[[1]][1] + 6,gregexpr(" title=\"",snippet)[[1]][1]-2)
# Title
a <- gregexpr("title=\"",snippet)[[1]][1] + 7
b <- min(gregexpr("\">",snippet)[[1]][which(gregexpr("\">",snippet)[[1]] > gregexpr("title=\"",snippet)[[1]][1] + 7)])-1
title[j,i] <- substring(snippet, a, b)
# Time of post
a <- gregexpr("\">\t",snippet)[[1]][1] + 7
b <- min(gregexpr("\t",snippet)[[1]][which(gregexpr("\t",snippet)[[1]] > gregexpr("\">\t",snippet)[[1]][1] + 7)])-1
time[j,i] <- as.character(as.Date(trim.leading(substring(snippet, a, b)), format = "%H:%M:%S %A %d %b %y"))
# Type of post
if (regexpr("complaints/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Complaint"
if (regexpr("complaints-to-compliments/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Convertion"
if (regexpr("compliments/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Compliment"
# Response time
if (!is.na(link[j,i])) {
post <- httpGET(link[j,i])
a <- min(gregexpr("SUPPLIER'S RESPONSE", post)[[1]])
if (a == -1) { response.date[j,i] <- 0
break}
b <- min(gregexpr("[0-9]{2}:[0-9]{2}:[0-9]{2}", substring(post, a, a + 500))[[1]])
c <- min(gregexpr("</td>", substring(post, a + b , a + b + 60))[[1]])
d <- substring(post, a + b + 10, a +  b + c + 8)
e <- as.Date(as.character(d), format = "%a %d %b %y")
response.date[j,i] <- as.character(e)
}
print(c(i,j))
}
}
for (i in 1:pages){
hp[i] <- httpGET(paste("http://hellopeter.com/momentum-health/compliments-and-complaints?country=South%20Africa&pg=", i, sep = ""))
print(i)
}
# Run this
for (i in 1:pages) {
linklocations <- gregexpr("<div class=\"td-item2\"><a class=\"fb-link\"", hp[i])
for (j in 1:length(linklocations[[1]])) {
#gets URL
snippet <- substring(hp[i],
linklocations[[1]][j],
if (j == length(linklocations[[1]])) nchar(hp[i]) else linklocations[[1]][j+1])
# Link
link[j,i] <- substring(snippet, gregexpr("href=\"",snippet)[[1]][1] + 6,gregexpr(" title=\"",snippet)[[1]][1]-2)
# Title
a <- gregexpr("title=\"",snippet)[[1]][1] + 7
b <- min(gregexpr("\">",snippet)[[1]][which(gregexpr("\">",snippet)[[1]] > gregexpr("title=\"",snippet)[[1]][1] + 7)])-1
title[j,i] <- substring(snippet, a, b)
# Time of post
a <- gregexpr("\">\t",snippet)[[1]][1] + 7
b <- min(gregexpr("\t",snippet)[[1]][which(gregexpr("\t",snippet)[[1]] > gregexpr("\">\t",snippet)[[1]][1] + 7)])-1
time[j,i] <- as.character(as.Date(trim.leading(substring(snippet, a, b)), format = "%H:%M:%S %A %d %b %y"))
# Type of post
if (regexpr("complaints/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Complaint"
if (regexpr("complaints-to-compliments/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Convertion"
if (regexpr("compliments/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Compliment"
# Response time
if (!is.na(link[j,i])) {
post <- httpGET(link[j,i])
a <- min(gregexpr("SUPPLIER'S RESPONSE", post)[[1]])
if (a == -1) { response.date[j,i] <- 0
break}
b <- min(gregexpr("[0-9]{2}:[0-9]{2}:[0-9]{2}", substring(post, a, a + 500))[[1]])
c <- min(gregexpr("</td>", substring(post, a + b , a + b + 60))[[1]])
d <- substring(post, a + b + 10, a +  b + c + 8)
e <- as.Date(as.character(d), format = "%a %d %b %y")
response.date[j,i] <- as.character(e)
}
print(c(i,j))
}
}
response.date
time
title
for (i in 7) {
#for (i in 1:pages) {
linklocations <- gregexpr("<div class=\"td-item2\"><a class=\"fb-link\"", hp[i])
for (j in 1:length(linklocations[[1]])) {
#gets URL
snippet <- substring(hp[i],
linklocations[[1]][j],
if (j == length(linklocations[[1]])) nchar(hp[i]) else linklocations[[1]][j+1])
# Link
link[j,i] <- substring(snippet, gregexpr("href=\"",snippet)[[1]][1] + 6,gregexpr(" title=\"",snippet)[[1]][1]-2)
# Title
a <- gregexpr("title=\"",snippet)[[1]][1] + 7
b <- min(gregexpr("\">",snippet)[[1]][which(gregexpr("\">",snippet)[[1]] > gregexpr("title=\"",snippet)[[1]][1] + 7)])-1
title[j,i] <- substring(snippet, a, b)
# Time of post
a <- gregexpr("\">\t",snippet)[[1]][1] + 7
b <- min(gregexpr("\t",snippet)[[1]][which(gregexpr("\t",snippet)[[1]] > gregexpr("\">\t",snippet)[[1]][1] + 7)])-1
time[j,i] <- as.character(as.Date(trim.leading(substring(snippet, a, b)), format = "%H:%M:%S %A %d %b %y"))
# Type of post
if (regexpr("complaints/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Complaint"
if (regexpr("complaints-to-compliments/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Convertion"
if (regexpr("compliments/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Compliment"
# Response time
if (!is.na(link[j,i])) {
post <- httpGET(link[j,i])
a <- min(gregexpr("SUPPLIER'S RESPONSE", post)[[1]])
if (a == -1) { response.date[j,i] <- 0
break}
b <- min(gregexpr("[0-9]{2}:[0-9]{2}:[0-9]{2}", substring(post, a, a + 500))[[1]])
c <- min(gregexpr("</td>", substring(post, a + b , a + b + 60))[[1]])
d <- substring(post, a + b + 10, a +  b + c + 8)
e <- as.Date(as.character(d), format = "%a %d %b %y")
response.date[j,i] <- as.character(e)
}
print(c(i,j))
}
}
i
hp[i]
gregexpr("<div class=\"td-item2\"><a class=\"fb-link\"", hp[i])
length(linklocations[[1]])
substring(hp[i],
linklocations[[1]][j],
if (j == length(linklocations[[1]])) nchar(hp[i]) else linklocations[[1]][j+1])
substring(snippet, gregexpr("href=\"",snippet)[[1]][1] + 6,gregexpr(" title=\"",snippet)[[1]][1]-2)
j <- 5
substring(snippet, gregexpr("href=\"",snippet)[[1]][1] + 6,gregexpr(" title=\"",snippet)[[1]][1]-2)
# Run this
for (i in 7) {
#for (i in 1:pages) {
linklocations <- gregexpr("<div class=\"td-item2\"><a class=\"fb-link\"", hp[i])
for (j in 1:length(linklocations[[1]])) {
#gets URL
snippet <- substring(hp[i],
linklocations[[1]][j],
if (j == length(linklocations[[1]])) nchar(hp[i]) else linklocations[[1]][j+1])
# Link
link[j,i] <- substring(snippet, gregexpr("href=\"",snippet)[[1]][1] + 6,gregexpr(" title=\"",snippet)[[1]][1]-2)
# Title
a <- gregexpr("title=\"",snippet)[[1]][1] + 7
b <- min(gregexpr("\">",snippet)[[1]][which(gregexpr("\">",snippet)[[1]] > gregexpr("title=\"",snippet)[[1]][1] + 7)])-1
title[j,i] <- substring(snippet, a, b)
# Time of post
a <- gregexpr("\">\t",snippet)[[1]][1] + 7
b <- min(gregexpr("\t",snippet)[[1]][which(gregexpr("\t",snippet)[[1]] > gregexpr("\">\t",snippet)[[1]][1] + 7)])-1
time[j,i] <- as.character(as.Date(trim.leading(substring(snippet, a, b)), format = "%H:%M:%S %A %d %b %y"))
# Type of post
if (regexpr("complaints/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Complaint"
if (regexpr("complaints-to-compliments/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Convertion"
if (regexpr("compliments/", link[j,i], ignore.case = T) != -1) type[j,i] <- "Compliment"
# Response time
if (!is.na(link[j,i])) {
post <- httpGET(link[j,i])
a <- min(gregexpr("SUPPLIER'S RESPONSE", post)[[1]])
if (a == -1)  response.date[j,i] <- 0 else {
b <- min(gregexpr("[0-9]{2}:[0-9]{2}:[0-9]{2}", substring(post, a, a + 500))[[1]])
c <- min(gregexpr("</td>", substring(post, a + b , a + b + 60))[[1]])
d <- substring(post, a + b + 10, a +  b + c + 8)
e <- as.Date(as.character(d), format = "%a %d %b %y")
response.date[j,i] <- as.character(e)}
}
print(c(i,j))
}
}
time
response.date
type
which(time> "2015-01-01")
c(time)
momhealth <- list(time, type, response.date)
momhealth[[1]][1,4]
as.vector(time)
as.vector(t(time))
c(t(time))
as.vector(as.matrix(time))
time.vector <- as.vector(as.matrix(time))
type.vector <- as.vector(as.matrix(type))
response.date.vector <- as.vector(as.matrix(response.date))
hp.df <- cbind(time.vector, type.vector, response.date.vector)
head(hp.df)
colnames(hp.df) <- c("post.date", "type", "response.date")
head(hp.df)
hp.df <- data.frame(cbind(time.vector, type.vector, response.date.vector))
colnames(hp.df) <- c("post.date", "type", "response.date")
hp.df$response.time <- hp.df$response.date - hp.df$post.date
hp.df$response.date
hp.df$post.date
hp.df[!is.na(hp.df$post.date),]
hp.df <- hp.df[!is.na(hp.df$post.date),]
colnames(hp.df) <- c("post.date", "type", "response.date")
hp.df$response.time <- hp.df$response.date - hp.df$post.date
hp.df$response.date <- as.Date(hp.df$response.date)
hp.df$response.date <- as.Date(hp.df$response.date)
hp.df$post.date <- as.Date(hp.df$post.date)
hp.df$response.time <- ashp.df$response.date - hp.df$post.date
hp.df$response.time <- hp.df$response.date - hp.df$post.date
hp.df
head(hp.df)
str(hp.df)
hp.df <- data.frame(cbind(time.vector, type.vector, response.date.vector))
hp.df <- hp.df[!is.na(hp.df$post.date),]
colnames(hp.df) <- c("post.date", "type", "response.date")
hp.df$response.date <- as.Date(hp.df$response.date)
hp.df$post.date <- as.Date(hp.df$post.date)
hp.df$response.time <- hp.df$response.date - hp.df$post.date
str(hp.df)
aggregate(date = hp.df, ~ hp.df$post.date + hp.df$type)
aggregate(date = hp.df, x ~ hp.df$post.date + hp.df$type, FUN = length)
aggregate(date = hp.df, hp.df$response.time ~ hp.df$post.date + hp.df$type, FUN = length)
require(plyr)
count(hp.df, c('post.date','type'))
hp.df
hp.df <- data.frame(cbind(time.vector, type.vector, response.date.vector))
hp.df <- hp.df[!is.na(hp.df$post.date),]
colnames(hp.df) <- c("post.date", "type", "response.date")
hp.df$response.date <- as.Date(hp.df$response.date)
hp.df$post.date <- as.Date(hp.df$post.date)
hp.df$response.time <- hp.df$response.date - hp.df$post.date
count(hp.df, c('post.date','type'))
hp.df
hp.df <- data.frame(cbind(time.vector, type.vector, response.date.vector))
hp.df
hp.df <- hp.df[!is.na(hp.df$post.date),]
hp.df <- hp.df[!is.na(hp.df$post.date),]
hp.df <- data.frame(cbind(time.vector, type.vector, response.date.vector))
head(hp.df)
hp.df <- data.frame(cbind(time.vector, type.vector, response.date.vector))
colnames(hp.df) <- c("post.date", "type", "response.date")
hp.df <- hp.df[!is.na(hp.df$post.date),]
hp.df$response.date <- as.Date(hp.df$response.date)
hp.df$post.date <- as.Date(hp.df$post.date)
hp.df$response.time <- hp.df$response.date - hp.df$post.date
count(hp.df, c('post.date','type'))
as.Date(hp.df$post.date, format = "%M-%Y")
as.Date(hp.df$post.date)
str(hp.df$post.date)
as.Date(hp.df$post.date, format = "%b-%Y")
format(hp.df$post.date, format = "%b-%Y")
hp.df$post.date.month <- format(hp.df$post.date, format = "%b-%Y")
count(hp.df, c('post.date.month','type'))
require(ggplot2)
hp.monthly <- count(hp.df, c('post.date.month','type'))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, col = type))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, col = type), stat = "bin")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, col = type), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = order(post.date.month, decreasing = F), y = freq, col = type), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month[order(post.date.month, decreasing = F),], y = freq, col = type), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month[order(post.date.month, decreasing = F)], y = freq, col = type), stat = "identity")
post.date.month[order(post.date.month, decreasing = F)]
hp.df$post.date.month[order(hp.df$post.date.month, decreasing = F)]
hp.monthly$post.date.month[order(hp.monthly$post.date.month, decreasing = F)]
hp.monthly
order(hp.monthly$post.date.month)
str(hp.monthly)
hp.monthly <- as.Date(hp.monthly)
hp.df$post.date.month <- as.Date(format(hp.df$post.date, format = "%b-%Y"))
format(hp.df$post.date, format = "%b-%Y")
hp.df
format(hp.df$post.date, format = "%b-%Y-01")
format(hp.df$post.date, format = "01-%b-%Y")
hp.df$post.date.month <- as.Date(format(hp.df$post.date, format = "01-%b-%Y"))
as.Date(hp.df$post.date, format = "01-%b-%Y")
ggplot() + geom_bar(data = hp.df, aes(x = post.date, y = freq, col = type), stat = "identity")
hp.monthly <- count(hp.df, c('post.date','type'))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date, y = freq, col = type), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date, y = freq, col = type), stat = "bin")
hp.df$post.date.month <- as.Date(hp.df$post.date, format = "%Y-%b")
hp.monthly <- count(hp.df, c('post.date','type'))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date, y = freq, col = type), stat = "bin")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date, y = freq, col = type), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, col = type), stat = "identity")
hp.monthly
hp.monthly <- count(hp.df, c('post.date.month','type'))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, col = type), stat = "identity")
hp.monthly
hp.df$post.date.month
hp.df$post.date.month <- format(hp.df$post.date, format = "%Y-%b")
hp.monthly <- count(hp.df, c('post.date.month','type'))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, col = type), stat = "identity")
hp.df$post.date.month <- format(hp.df$post.date, format = "%Y-%M")
hp.monthly <- count(hp.df, c('post.date.month','type'))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, col = type), stat = "identity")
hp.df$post.date.month <- format(hp.df$post.date, format = "%Y-%m")
hp.monthly <- count(hp.df, c('post.date.month','type'))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, col = type), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity")
str(hp.df)
ggplot() + geom_line(data = hp.df, aes(x = post.date, y = .count.))
ggplot() + geom_line(data = hp.df, aes(x = post.date, y = ..count.))
ggplot() + geom_line(data = hp.df, aes(x = post.date, y = ..count))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = ..count), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = .count.), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = ..count..), stat = "identity")
p <- ggplot(mpg, aes(x=factor(cyl), y=..count..))
p
p + geom_histogram()
p + stat_summary(fun.y=identity, geom='bar')
p + geom_bar(stat="bin")
hp.count <- count(hp.df, c('post.date', 'type'))
str(hp.count)
ggplot() + geom_line(data = hp.count, aes(x = post.date, y = freq))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = ..count..), stat = "identity")
hp.monthly <- count(hp.df, c('post.date.month','type'))
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity")
hp.count
hp.df
aggregate(data = hp.df, response.time ~ post.date.month, FUN = ave)
ave.time.pm <- aggregate(data = hp.df, response.time ~ post.date.month, FUN = ave)
plot(ave.time.pm)
str(ave.time.pm)
ave.time.pm <- aggregate(data = hp.df, response.time ~ post.date.month, FUN = sum)
ave.time.pm
ave.time.pm <- aggregate(data = hp.df, response.time ~ post.date.month, FUN = mean)
ave.time.pm
plot(ave.time.pm)
str(ave.time.pm$response.time)
plot(ave.time.pm$response.time)
str(ave.time.pm)
ggplot() + geom_bar(data = ave.time.pm, aes(x = post.date.month, y = response.time), stat = "identity")
str(hp.monthly)
ggplot() + geom_bar(data = ave.time.pm, aes(x = post.date.month, y = response.time), stat = "bin")
str(ave.tim)
str(ave.time.pm)
ggplot() + geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time)), stat = "bin")
ggplot() + geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time)), stat = "identity")
ggplot() + geom_line(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time)))
identity
ggplot() + geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time)), stat = "identity")
ggplot() + geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time), fill = as.numeric(response.time)), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = freq), stat = "identity")
?geom_bar
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = freq), stat = "identity", position = "dodge")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = freq, position = "dodge"), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = freq), stat = "identity")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = freq), stat = "identity", position = "stack")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = freq), stat = "identity", position = "dodge")
ggplot(data = hp.monthly, aes(x = post.date.month, y = freq, fill = freq)) + geom_bar(stat = "identity", position = "dodge")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+ scale_fill_brewer()
ggplot() + geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+ scale_fill_brewer("Set2")
ggplot() +
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Set2")
ggplot() +
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Set3")
ggplot() +
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Spectral")
scale_fill_brewer(palette = "paired")
ggplot() +
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Paired")
scale_fill_brewer(palette = "Set1")
ggplot() +
geom_bar(data = hp.monthly, aes(x = post.date.month, y = freq, fill = type), stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Set1")
ggplot() + geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time), fill = as.numeric(response.time)), stat = "identity")
ggplot() +
geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time), fill = as.numeric(response.time)), stat = "identity")+
scale_fill_brewer(palette = "Set1")
ggplot() +
geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time), fill = as.numeric(response.time)), stat = "identity")+
scale_fill_brewer(palette = "Blues")
geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time), fill = as.numeric(response.time)), stat = "identity")
ggplot() +
geom_bar(data = ave.time.pm, aes(x = post.date.month, y = as.numeric(response.time), fill = as.numeric(response.time)), stat = "identity")
setwd("C:/Users/Veldrin/Documents/GitHub/HelloPeter")
?saveRDS
saveRDS(hp.df, "hellopeterdf.RDS")
getwd()
require(twitteR)
require(plyr)
require(wordcloud)
require(tm)
#PC
setwd("C:/Users/Veldrin/Documents/GitHub/SATwitteR")
#Laptop
setwd("C:/Users/anmarais/Desktop/GitHub/SATwitteR")
all.tweets <- readRDS("tweets.RDS")
#download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
consumer_key <- 'tzpuerQtZ4PGi0jqOgNg77y6w'
consumer_secret <- 'YJwFwkfvZQ3SNdIVVoASZPspgt8b7esLp8Jqp4qk7ldWINGDin'
access_token <- '1592761717-yWRgnXsVOimayc8N5Gov9lZDSnM6Ui2kBYQOhaK'
access_secret <- 'H88PH4tiiDJg2Kir5NkcrhEw3sf0PSqrK5XGIwRKGHqYx'
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token,
access_secret)
lim1 <- getCurRateLimitInfo(c("lists", "users"))
#t.handles <- data.frame(read.csv(file.path(getwd(), "/data/twitterhandles.csv")))
all.tweets <- list()
user.tweets <- data.frame()
combined.tweets <- list()
for (i in 1:nrow(t.handles)) {
#user.tweets <- userTimeline(as.character(t.handles[i,1]), n = 200)
all.tweets[[i]] <- try(userTimeline(as.character(t.handles[i,1]), n = 10))
print(i)
}
k <- 1
for (i in 1:nrow(t.handles)) {
if (length(all.tweets[[i]]) > 1) {
user.tweets <- data.frame()
for (j in 1:length(all.tweets[[i]])) {
user.tweets[j,1] <- as.character(all.tweets[[i]][[j]]$screenName)
user.tweets[j,2] <- as.character(all.tweets[[i]][[j]]$text)
user.tweets[j,3] <- as.character(as.Date(all.tweets[[i]][[j]]$created))
}
combined.tweets[[k]] <- user.tweets
k <- k +1
}
}
setwd("C:/Users/Veldrin/Documents/GitHub/SATwitteR")
lim1 <- getCurRateLimitInfo(c("lists", "users"))
#t.handles <- data.frame(read.csv(file.path(getwd(), "/data/twitterhandles.csv")))
all.tweets <- list()
user.tweets <- data.frame()
combined.tweets <- list()
for (i in 1:nrow(t.handles)) {
#user.tweets <- userTimeline(as.character(t.handles[i,1]), n = 200)
all.tweets[[i]] <- try(userTimeline(as.character(t.handles[i,1]), n = 10))
print(i)
}
k <- 1
for (i in 1:nrow(t.handles)) {
if (length(all.tweets[[i]]) > 1) {
user.tweets <- data.frame()
for (j in 1:length(all.tweets[[i]])) {
user.tweets[j,1] <- as.character(all.tweets[[i]][[j]]$screenName)
user.tweets[j,2] <- as.character(all.tweets[[i]][[j]]$text)
user.tweets[j,3] <- as.character(as.Date(all.tweets[[i]][[j]]$created))
}
combined.tweets[[k]] <- user.tweets
k <- k +1
}
}
t.handles <- data.frame(read.csv(file.path(getwd(), "/data/twitterhandles.csv")))
all.tweets <- list()
user.tweets <- data.frame()
combined.tweets <- list()
for (i in 1:nrow(t.handles)) {
#user.tweets <- userTimeline(as.character(t.handles[i,1]), n = 200)
all.tweets[[i]] <- try(userTimeline(as.character(t.handles[i,1]), n = 10))
print(i)
}
length(all.tweets[[i]])
(all.tweets[[i]]
all.tweets[[i]]
i
i <- 195
length(all.tweets[[i]]
)
getCurRateLimitInfo(c("lists", "users"))
k <- 1
for (i in 1:nrow(t.handles)) {
if (length(all.tweets[[i]]) > 1) {
user.tweets <- data.frame()
for (j in 1:length(all.tweets[[i]])) {
user.tweets[j,1] <- as.character(all.tweets[[i]][[j]]$screenName)
user.tweets[j,2] <- as.character(all.tweets[[i]][[j]]$text)
user.tweets[j,3] <- as.character(as.Date(all.tweets[[i]][[j]]$created))
}
combined.tweets[[k]] <- user.tweets
k <- k +1
}
}
getCurRateLimitInfo(c("lists", "users"))
i
i <- 1
k <- 1
for (i in 1:nrow(t.handles)) {
if (length(all.tweets[[i]]) > 1) {
user.tweets <- data.frame()
for (j in 1:length(all.tweets[[i]])) {
user.tweets[j,1] <- as.character(all.tweets[[i]][[j]]$screenName)
user.tweets[j,2] <- as.character(all.tweets[[i]][[j]]$text)
user.tweets[j,3] <- as.character(as.Date(all.tweets[[i]][[j]]$created))
}
combined.tweets[[k]] <- user.tweets
k <- k +1
}
}
i
combined.tweets
df <- ldply(combined.tweets, data.frame)
colnames(df) <- c("ScreenName", "Tweet", "TweetDate")
df <- df[which(as.character(gregexpr("@", df$Tweet)) == -1),]
urlstring <- "http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+"
df$Tweet <- sapply(df$Tweet, function(x) gsub(urlstring, "", x))
df$Tweet
df$Tweet <- sapply(df$Tweet, function(x) iconv(x,"latin1", "ASCII", sub = ""))
df$Tweet <- sapply(df$Tweet, function(x) gsub("\n", "", x))
df$Tweet <- sapply(df$Tweet, function(x) gsub("the", "", x, ignore.case = T)) #removeWords is buggy now, doesnt remove "the" when it's the first word of the string
df$Tweet
short.urls <- regmatches(df$Tweet,gregexpr(urlstring, df$Tweet))
short.urls <- as.character(unlist(short.urls[which(as.character(short.urls) != "character(0)")]))
short.urls <- as.character(sapply(short.urls, function(x) substring(x, 1, nchar(x))))
tweet.corpus <- Corpus(VectorSource(df$Tweet))
#tweet.corpus <- tm_map(tweet.corpus, tolower) buggy
tweet.corpus <- tm_map(tweet.corpus, removeWords, stopwords("english"))
tweet.corpus <- tm_map(tweet.corpus, removeWords, c("&lsquo;", "&rsquo;", "&ldquo;", "&ldquo;", "&ndash", "said"))
tweet.corpus <- tm_map(tweet.corpus, removePunctuation)
tweet.corpus <- tm_map(tweet.corpus, stripWhitespace)
tweet.corpus <- tm_map(tweet.corpus, removeNumbers)
tdm <- TermDocumentMatrix(tweet.corpus)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
wordcloud(names(v),v,c(4,.2),2,100)
b <- regmatches(df$Tweet,gregexpr("#(\\d|\\w)+", df$Tweet))
c <- b[which(as.character(b) != "character(0)")]
d <- table(unlist(tolower(c)))
e <- order(d, decreasing = T)[1:5]
d[e]
try(userTimeline(as.character(t.handles[i,1]), n = 10))
userTimeline(as.character(t.handles[i,1]), n = 10)
